// KnapSack (vector of pair)

vector<pair<int, int>>v;
ll n, k, a, b;
pair<ll, ll>  mem[1000][1000];
pair<ll,ll> sol(ll i, ll pre)
{
	if (i == n || pre == 0)
		return{ 0, 0 };
	if (pre < 0)
		return{ -1e6, 0 };
	if (mem[i][pre] != make_pair(-1LL, -1LL))
		return mem[i][pre];
	pair<ll,ll> path1 = sol(i + 1, pre);
	pair<ll, ll> path2 = { 0, 0 };
	if (v[i].second <= pre){
		path2 = sol(i + 1, pre - v[i].second);
		path2.first += v[i].first;
		path2.second++;
	}
	return mem[i][pre] = max(path1, path2);
}
int main()
{
	K_K();
	cin >> n >> k;
	for (int i = 0; i < n; i++)
	{
		cin >> a >> b;
		v.push_back({ a, b });
	}
	memset(mem, -1, sizeof(mem));
	pair<ll, ll>p;
	p=sol(0, k);
	cout << p.first << " " << p.second;
	//		ss;
}