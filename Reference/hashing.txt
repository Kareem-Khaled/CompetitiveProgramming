// HASHING: convert string to int to compare it in O(1)
ll egcd(ll a, ll b, ll &x, ll &y){ /// ax + by = gcd(a,b)
	if (!b){
		x = 1;
		y = 0;
		return a;
	}
	ll g = egcd(b, a%b, y, x);
	y -= (a / b)*x;
	return g;
}
ll modInverse(ll a, ll m){ /// (a/b)%m = ((a%m)*(modInverse(b)%m))%m
	ll x, y, g;
	g = egcd(a, m, x, y);
	if (g>1)
		return -1;
	return (x + m) % m;
}
ll MOD(ll x, ll y){
	return ((x % y) + y) % y;
}
// summtion s[i]*x**(sz(s) - i - 1)
ll pushBack(ll h, ll x, ll p, char ch){
	return (((h*x) % p) + ch) % p;
}
ll pushFront(ll h, ll xp, ll p, char ch){ // xp = XP[len]
	return (h + (xp*ch) % p) % p;
}

ll popBack(ll h, ll x, ll p, char ch){
	return (MOD(h - ch, p)*modInverse(x, p)) % p;
}

ll popFront(ll h, ll xp, ll p, char ch){ // xp = XP[len-1]
	return MOD(h - ((xp*ch) % p), p);
}
int main(){
	K_K();
	int x = 128, p1 = 1e9 + 7, p2 = 1e9 + 9;
	vector<ll>XP1(1e5 + 1), XP2(1e5 + 1);
	XP1[0] = XP2[0] = 1;
	for (int i = 1; i <= 100000; i++){
		XP1[i] = (XP1[i - 1] * x) % p1;
		XP2[i] = (XP2[i - 1] * x) % p2;
	}
}