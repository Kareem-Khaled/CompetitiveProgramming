// fenwick (binary indexed tree)-(BIT) (range query), can do prefix sum and update on it;
int n; vector<ll>bit;
vector<int>arr;
void add(int idx, int num){
	for (int i = idx; i <= n; i += (i & -i))
		bit[i] += num;
}
void build(){
	bit = vector<ll>(n + 1);
	for (int i = 1; i <= n; i++)
		add(i, arr[i]);
}
ll prefixSum(int x){
	ll ret = 0;
	for (int i = x; i > 0; i -= (i & -i))
		ret += bit[i];
	return ret;
}
ll rangeSum(int l, int r){
	return prefixSum(r) - prefixSum(l - 1);
}
int main(){
	K_K();
	cin >> n; arr = vector<int>(n + 1);
	for (int i = 1; i <= n; i++)cin >> arr[i];
	build(); int q; cin >> q;
	while (q--){
		int x, l, r; cin >> x >> l >> r;
		if (x == 1)
			cout << rangeSum(l, r) << endl;
		else{
			add(l, r - arr[l]);
			arr[l] = r;
		}
	}
}