//sparse table
const int N = 1e5 + 2;
int n; vector<int>arr;
int table[N][20];
void buildTable(){
	for (int i = 0; i < n; i++)table[i][0] = arr[i];
	for (int j = 1; (1 << j) <= n; j++){
		for (int i = 0; i + (1 << j) <= n; i++){
			table[i][j] = min(table[i][j - 1], table[i + (1 << (j - 1))][j - 1]);
		}
	}
}
int LOG(int x){
	return 31 - __builtin_clz(x);
}
int solve(int l, int r){
	//int x = LOG(r - l + 1);
	//return min(table[l][x], table[r - (1 << x) + 1][x]);

	int x = (r - l + 1), st = l, mn = oo;
	for (int j = 0; j < 20; j++){
		if (x&(1 << j)){
			mn = min(mn, table[st][j]);
			st += (1 << j);
		}
	}
	return mn;
}