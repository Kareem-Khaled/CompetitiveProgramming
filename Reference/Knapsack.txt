// KnapSack
	vector<pair<int, int>>v;
ll n, mem[1000][1000], k, a, b;
ll sol(ll i, ll pre)
{
	if (i == n || pre==0)
		return 0;
	if (pre < 0)
		return -1e6;
	if (mem[i][pre] != -1)
		return mem[i][pre];
	ll path1 = sol(i + 1, pre);
	ll path2 = 0;
	if (v[i].first <= pre)
		path2 = sol(i + 1, pre-v[i].first)+v[i].second;
	return mem[i][pre]=max(path1, path2);
}
int main()
{
	K_K();
	cin >> n >> k;
	for (int i = 0; i < n; i++)
	{
		cin >> a >> b;
		v.push_back({ a, b });
	}
	memset(mem, -1, sizeof(mem));
	cout << sol(0, k);

//		ss;
}