// Tarjan articulation points

vector<vector<int>>adjList;
vector<int>low, dfn;
set<int>artpoints;
int ndfn, n, m; bool root = 0;
void bicon(int node, int par) {
	low[node] = dfn[node] = ndfn++;
	for (auto child : adjList[node]) {
		if (!~dfn[child]){	// not visited
			bicon(child, node);
			low[node] = min(low[node], low[child]);
			if (low[child] >= dfn[node]){
				if (dfn[node] == 0 && !root)
					root = 1;
				else
					artpoints.insert(node);
			}
		}
		else if (child != par)
			low[node] = min(low[node], dfn[child]);
	}
}
int main(){
	K_K();
	cin >> n >> m;
	adjList = vector<vector<int>>(n + 1);
	for (int i = 0; i < m; i++) {
		int f, t; cin >> f >> t;
		adjList[f].push_back(t);
		adjList[t].push_back(f);
	}
	low = dfn = vector<int>(n + 1, -1);
	for (int i = 1; i <= n; i++) {
		if (!~dfn[i])
			bicon(i, -1);
	}
	for (auto it : artpoints)
		cout << it << ' ';
}