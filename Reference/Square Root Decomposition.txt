// Square Root Decomposition
int n; vector<int>arr;
vector<vector<int>>blocks;
int main(){
	K_K();
	cin >> n; arr = vector<int>(n);
	int sqr = ceil(sqrt(n));
	vector<vector<int>>blocks(sqr);
	for (int i = 0; i < n; i++){
		cin >> arr[i];
		blocks[i / sqr].push_back(arr[i]);
	}
	for (int i = 0; i < sqr; i++)sort(all(blocks[i]));
	int q; cin >> q;
	while (q--){
		int x; cin >> x;
		if (x){
			int idx; cin >> idx >> x;
			int bidx = --idx / sqr;
			int pos = lower_bound(all(blocks[bidx]), arr[idx]) - blocks[bidx].begin();
			blocks[bidx][pos] = x; sort(all(blocks[bidx])); arr[idx] = x;
		}
		else{
			int l, r; cin >> l >> r >> x;
			int cnt = 0; l--; r--;
			for (int i = l; i <= r;){
				if (i%sqr == 0 && i + sqr - 1 <= r){
					int bidx = i / sqr;
					int pos = lower_bound(all(blocks[bidx]), x) - blocks[bidx].begin();
					cnt += sqr - pos; i += sqr;
				}
				else cnt += (arr[i++] >= x);
			}
			cout << cnt << endl;
		}
	}
}