// Prime_Factors_Faster
vector<int>prime(N,1), primes;
void sieve_v2(){
	prime[0] = prime[1] = 0;
	for (int i = 4; i < N; i += 2){
		prime[i] = 0;
	}
	for (int i = 3; i * i < N; i += 2){
		if (prime[i]){
			for (int j = i * i; j < N; j += i + i){
				prime[j] = 0;
			}
		}
	}
	primes.push_back(2);
	for (int i = 3; i < N; i+=2){
		if (prime[i])
			primes.push_back(i);
	}
}
vector<int>ans(N,0);
void Prime_Factors_Faster(int n){
	if (prime[n]){
	    ans[n]++;
		return;
	}
	int idx = 0;
	while (idx < primes.size() && primes[idx] * primes[idx] <= n){
		int cnt = 0;
		while (n % primes[idx] == 0){
			n /= primes[idx];
			cnt++;
		}
		if (cnt)
		    ans[primes[idx]]++;
		idx++;
	}
	if (n>1)
		ans[n]++;
}